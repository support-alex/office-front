{"remainingRequest":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/babel-loader/lib/index.js!/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/eslint-loader/index.js??ref--13-0!/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/core/mock/mock.service.js","dependencies":[{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/core/mock/mock.service.js","mtime":1629216362648},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgVnVlIGZyb20gInZ1ZSI7Cgp2YXIgTW9ja0FkYXB0ZXIgPSByZXF1aXJlKCJheGlvcy1tb2NrLWFkYXB0ZXIiKTsgLy8gbW9jayB0ZXN0aW5nIHVzZXIgYWNjb3VudHMKCgp2YXIgdXNlcnMgPSBbewogIGVtYWlsOiAiYWRtaW5AZGVtby5jb20iLAogIHBhc3N3b3JkOiAiZGVtbyIsCiAgdG9rZW46ICJtZ2ZpNWp1Zjc0aiIKfSwgewogIGVtYWlsOiAiYWRtaW4yQGRlbW8uY29tIiwKICBwYXNzd29yZDogImRlbW8iLAogIHRva2VuOiAiZmdqOGZqZGZrNDMiCn1dOwp2YXIgTW9ja1NlcnZpY2UgPSB7CiAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgIC8vIHRoaXMgc2V0cyB0aGUgbW9jayBhZGFwdGVyIG9uIHRoZSBkZWZhdWx0IGluc3RhbmNlCiAgICB2YXIgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihWdWUuYXhpb3MpOyAvLyBtb2NrIGxvZ2luIHJlcXVlc3QKCiAgICBtb2NrLm9uUG9zdCgiL2xvZ2luIikucmVwbHkoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgdmFyIGNyZWRlbnRpYWwgPSBKU09OLnBhcnNlKGRhdGEuZGF0YSk7CiAgICAgIHZhciBmb3VuZCA9IHVzZXJzLmZpbmQoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICByZXR1cm4gY3JlZGVudGlhbC5lbWFpbCA9PT0gdXNlci5lbWFpbCAmJiBjcmVkZW50aWFsLnBhc3N3b3JkID09PSB1c2VyLnBhc3N3b3JkOwogICAgICB9KTsKCiAgICAgIGlmIChmb3VuZCkgewogICAgICAgIHJldHVybiBbMjAwLCBmb3VuZF07CiAgICAgIH0KCiAgICAgIHJldHVybiBbNDA0LCB7CiAgICAgICAgZXJyb3JzOiBbIlRoZSBsb2dpbiBkZXRhaWwgaXMgaW5jb3JyZWN0Il0KICAgICAgfV07CiAgICB9KTsgLy8gbW9jayB0byB2ZXJpZnkgYXV0aGVudGljYXRpb24KCiAgICBtb2NrLm9uR2V0KC9cL3ZlcmlmeVwvPy8pLnJlcGx5KGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHZhciB0b2tlbiA9IGRhdGEuaGVhZGVycy5BdXRob3JpemF0aW9uLnJlcGxhY2UoIlRva2VuICIsICIiKTsKCiAgICAgIGlmICh0b2tlbiAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICB2YXIgZm91bmQgPSB1c2Vycy5maW5kKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgICByZXR1cm4gdG9rZW4gPT09IHVzZXIudG9rZW47CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIFsyMDAsIGZvdW5kXTsKICAgICAgfQoKICAgICAgcmV0dXJuIFs0MDEsIHsKICAgICAgICBlcnJvcnM6IFsiSW52YWxpZCBhdXRoZW50aWNhdGlvbiJdCiAgICAgIH1dOwogICAgfSk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCBNb2NrU2VydmljZTs="},{"version":3,"sources":["/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/core/mock/mock.service.js"],"names":["Vue","MockAdapter","require","users","email","password","token","MockService","init","mock","axios","onPost","reply","data","credential","JSON","parse","found","find","user","errors","onGet","headers","Authorization","replace"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAAzB,C,CAEA;;;AACA,IAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,KAAK,EAAE;AAHT,CADY,EAMZ;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,KAAK,EAAE;AAHT,CANY,CAAd;AAaA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IADkB,kBACX;AACL;AACA,QAAIC,IAAI,GAAG,IAAIR,WAAJ,CAAgBD,GAAG,CAACU,KAApB,CAAX,CAFK,CAIL;;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,QAAZ,EAAsBC,KAAtB,CAA4B,UAAAC,IAAI,EAAI;AAClC,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACA,IAAhB,CAAnB;AACA,UAAMI,KAAK,GAAGd,KAAK,CAACe,IAAN,CAAW,UAAAC,IAAI,EAAI;AAC/B,eACEL,UAAU,CAACV,KAAX,KAAqBe,IAAI,CAACf,KAA1B,IACAU,UAAU,CAACT,QAAX,KAAwBc,IAAI,CAACd,QAF/B;AAID,OALa,CAAd;;AAMA,UAAIY,KAAJ,EAAW;AACT,eAAO,CAAC,GAAD,EAAMA,KAAN,CAAP;AACD;;AACD,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,MAAM,EAAE,CAAC,+BAAD;AAAV,OAAN,CAAP;AACD,KAZD,EALK,CAmBL;;AACAX,IAAAA,IAAI,CAACY,KAAL,CAAW,aAAX,EAA0BT,KAA1B,CAAgC,UAAAC,IAAI,EAAI;AACtC,UAAMP,KAAK,GAAGO,IAAI,CAACS,OAAL,CAAaC,aAAb,CAA2BC,OAA3B,CAAmC,QAAnC,EAA6C,EAA7C,CAAd;;AACA,UAAIlB,KAAK,KAAK,WAAd,EAA2B;AACzB,YAAMW,KAAK,GAAGd,KAAK,CAACe,IAAN,CAAW,UAAAC,IAAI,EAAI;AAC/B,iBAAOb,KAAK,KAAKa,IAAI,CAACb,KAAtB;AACD,SAFa,CAAd;AAGA,eAAO,CAAC,GAAD,EAAMW,KAAN,CAAP;AACD;;AACD,aAAO,CAAC,GAAD,EAAM;AAAEG,QAAAA,MAAM,EAAE,CAAC,wBAAD;AAAV,OAAN,CAAP;AACD,KATD;AAUD;AA/BiB,CAApB;AAkCA,eAAeb,WAAf","sourcesContent":["import Vue from \"vue\";\r\n\r\nvar MockAdapter = require(\"axios-mock-adapter\");\r\n\r\n// mock testing user accounts\r\nconst users = [\r\n  {\r\n    email: \"admin@demo.com\",\r\n    password: \"demo\",\r\n    token: \"mgfi5juf74j\"\r\n  },\r\n  {\r\n    email: \"admin2@demo.com\",\r\n    password: \"demo\",\r\n    token: \"fgj8fjdfk43\"\r\n  }\r\n];\r\n\r\nconst MockService = {\r\n  init() {\r\n    // this sets the mock adapter on the default instance\r\n    var mock = new MockAdapter(Vue.axios);\r\n\r\n    // mock login request\r\n    mock.onPost(\"/login\").reply(data => {\r\n      const credential = JSON.parse(data.data);\r\n      const found = users.find(user => {\r\n        return (\r\n          credential.email === user.email &&\r\n          credential.password === user.password\r\n        );\r\n      });\r\n      if (found) {\r\n        return [200, found];\r\n      }\r\n      return [404, { errors: [\"The login detail is incorrect\"] }];\r\n    });\r\n\r\n    // mock to verify authentication\r\n    mock.onGet(/\\/verify\\/?/).reply(data => {\r\n      const token = data.headers.Authorization.replace(\"Token \", \"\");\r\n      if (token !== \"undefined\") {\r\n        const found = users.find(user => {\r\n          return token === user.token;\r\n        });\r\n        return [200, found];\r\n      }\r\n      return [401, { errors: [\"Invalid authentication\"] }];\r\n    });\r\n  }\r\n};\r\n\r\nexport default MockService;\r\n"]}]}