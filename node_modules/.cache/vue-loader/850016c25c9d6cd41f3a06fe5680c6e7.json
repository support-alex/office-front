{"remainingRequest":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/src/view/pages/vuetify/Cards.vue?vue&type=template&id=56a005d0&","dependencies":[{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/src/view/pages/vuetify/Cards.vue","mtime":1601367364000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}