{"remainingRequest":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/view/pages/vue-bootstrap/Card.vue?vue&type=template&id=0576de24&","dependencies":[{"path":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/view/pages/vue-bootstrap/Card.vue","mtime":1601367364000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}