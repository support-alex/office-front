{"remainingRequest":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\auth\\login_pages\\Login-1.vue?vue&type=template&id=18caa085&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\auth\\login_pages\\Login-1.vue","mtime":1751225248936},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1670779070623},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1670779070622}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}