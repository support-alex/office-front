{"remainingRequest":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/src/mycore/MyTable1.vue?vue&type=template&id=5d17790a&","dependencies":[{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/src/mycore/MyTable1.vue","mtime":1657074799178},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Documents/00_Bisinnoco/Bisinnoco/office-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iY2FyZCBjYXJkLWN1c3RvbSBjYXJkLXN0cmV0Y2ggZ3V0dGVyLWIgICI+CgogICAgIAogICAgPCEtLWJlZ2luOjpIZWFkZXItLT4KICAgIDxkaXYgY2xhc3M9IiBmbGV4IGl0ZW1zLWNlbnRlciByb3cgIHB5LTYgIiAgIDpjbGFzcz0idGFibGVEZXRhaWwudGFibGVDbGFzcyIgPgogICAgICA8ZGl2IGNsYXNzPSIgIGNvbC1sZy00IGNvbC1tZC02IGNvbC1zbS0xMiAgIj4KICAgICAgICA8aDIgY2xhc3M9ImNhcmQtdGl0bGUgZmxleCBqdXN0aWZ5LWNlbnRlciBmbGV4LWNvbHVtbiAgcGwtNCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZC1sYWJlbCBmb250LXdlaWdodC1ib2xkZXIgdGV4dC1kYXJrIHRleHQtM3hsIG1pdHItZm9udCI+CiAgICAgICAgICAgIHt7dGFibGVEZXRhaWwudGFibGVIZWFkZXJ9fQogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtbXV0ZWQgbXQtMyBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1zbSBtaXRyLWZvbnQiPgogICAgICAgICAgICB7e3RhYmxlRGV0YWlsLnRhYmxlU3ViSGVhZGVyfX0KICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2gyPgogICAgICA8L2Rpdj4KCgogICAgIDxkaXYgY2xhc3M9ImZsZXggIGNvbC1sZy04IGNvbC1tZC02IGNvbC1zbS0xMiAgZ2FwLTQiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgZC1mbGV4IGp1c3RpZnktZW5kIHctZnVsbCI+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtMyBjb2wtbGctMyBjb2wtbWQtNiBjb2wtc20tMTIgcGItNiIgdi1mb3I9IihidG4sIGJ0bl9pbmRleCkgaW4gdGFibGVEZXRhaWwudGFibGVCdXR0b24iIHYtYmluZDprZXk9ImJ0bl9pbmRleCIgPgogICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImJ0bi50eXBlPT09J3JlZGlyZWN0JyIgQGNsaWNrPSJsaW5rVG8oYnRuLnJlZGlyZWN0VG8pIiA6Y2xhc3M9ImNvbmNhdFRleHQoJ2J0bi0nLCBidG4uY29sb3IgKSIgIGNsYXNzPSJidG4gYnRuLXtidG4uY29sb3J9IGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtc20gdGV4dC1sZyBtaXRyLWZvbnQiIHN0eWxlPSJ3aWR0aDoxMDAlOyBoZWlnaHQ6My4ycmVtOyAgbWFyZ2luLXJpZ2h0OjJweDsgY3Vyc29yOiBwb2ludGVyOyIgPgogICAgICAgICAgICAgICAgICAgIHt7YnRuLnRleHR9fQogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJidG4udHlwZT09PSdjYWxsU3RvcmUnIiBAY2xpY2s9ImNhbGxTdG9yZUFjdGlvbihidG4pIiA6Y2xhc3M9ImNvbmNhdFRleHQoJ2J0bi0nLCBidG4uY29sb3IgKSIgIGNsYXNzPSJidG4gYnRuLXtidG4uY29sb3J9IGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtc20gdGV4dC1sZyBtaXRyLWZvbnQiIHN0eWxlPSJ3aWR0aDoxMDAlOyBoZWlnaHQ6My4ycmVtOyAgbWFyZ2luLXJpZ2h0OjJweDsgY3Vyc29yOiBwb2ludGVyOyIgPgogICAgICAgICAgICAgICAgICAgIHt7YnRuLnRleHR9fQogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJidG4udHlwZT09PSdleHBvcnRFeGNlbCciICA+CiAgICAgICAgICAgICAgICAgICAgICA8dnVlLWV4Y2VsLXhsc3gKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjFyZW07IGZvbnQtZmFtaWx5OiBtaXRyOyB3aWR0aDoxMjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBweS0zIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz0iW2NvbmNhdFRleHQoJ2J0bi0nLCBidG4uY29sb3IgKV0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmRhdGE9InNlbGVjdGVkTGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICA6Y29sdW1ucz0iY29sdW1ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICA6ZmlsZS1uYW1lPSInZXhwb3J0ZWRfZmlsZSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgOmZpbGUtdHlwZT0iJ3hsc3gnIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpzaGVldC1uYW1lPSInc2hlZXRuYW1lJyIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwb3J0IGV4Y2VsCiAgICAgICAgICAgICAgICAgICAgICA8L3Z1ZS1leGNlbC14bHN4PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAKCiAgICAgICAgICA8c2xvdCBuYW1lPSJkeW5hbWljQ29tcG9uZW50IiA+PC9zbG90PgoKICAgICAgIAogICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKCiAgICAgCiAgICA8L2Rpdj4KICAgIDwhLS1lbmQ6OkhlYWRlci0tPgoKICAgIDwhLS1iZWdpbjo6U2VhcmNoIEZvcm0tLT4KICAgICAgPGRpdiBjbGFzcz0ibWItNyBweC00IiAgOmNsYXNzPSJ0YWJsZURldGFpbC50YWJsZUNsYXNzIiA+CiAgICAgICAgPGRpdiBjbGFzcz0icm93IGFsaWduLWl0ZW1zLXN0YXJ0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMCBjb2wteGwtMTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQiPgogICAgICAgICAgICAgIDwhLS0gQmVnaW4gOiBUZXh0IEluYm94IC0tPgoKICAgICAgICAgICAgICA8ZGl2IHYtZm9yPSIoZmlsdGVyUGFyYW0sIGZpKSBpbiB0YWJsZURldGFpbC50YWJsZUZpbHRlciIgIHYtYmluZDprZXk9ImZpIiBjbGFzcz0iY29sLW1kLTQgbXktMiBteS1tZC0wIHB5LTMiID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1pY29uIiB2LWlmPSJmaWx0ZXJQYXJhbVsndHlwZSddID09PSAndGV4dCciICA+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgOnBsYWNlaG9sZGVyPSJmaWx0ZXJQYXJhbVsncGxhY2Vob2xkZXInXSIgdi1tb2RlbD0iJGRhdGFbJ2ZpbFBhcmFtJ11bZmldIiAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aSA6Y2xhc3M9IlsnZmxhdGljb24yLXNlYXJjaC0xJywgJ3RleHQtbXV0ZWQnXSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PiA8IS0tIFRFWFQgSU5QVVQgLS0+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiIHYtaWY9ImZpbHRlclBhcmFtWyd0eXBlJ10gPT09ICdzZWxlY3QnIiAgPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJtci0zIG1iLTAgZC1ub25lIGQtbWQtYmxvY2siPnt7ZmlsdGVyUGFyYW1bJ2xhYmVsJ119fTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0ICAgY2xhc3M9ImZvcm0tY29udHJvbCIgIHYtbW9kZWw9IiRkYXRhWydmaWxQYXJhbSddW2ZpXSIgPgogICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtZm9yPSIob3B0aW9uSXRlbSwgb3BpKSBpbiBmaWx0ZXJQYXJhbVsnb3B0aW9uJ10iIHYtYmluZDprZXk9Im9waSIgOnZhbHVlPSJvcHRpb25JdGVtWyd2YWx1ZSddIj57e29wdGlvbkl0ZW1bImRpc3BsYXkiXX19PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBTRUxFQ1QgLS0+CiAgICAgICAgICAgICAgPC9kaXY+IDwhLS0gRk9SIC0tPgoKCiAgICAgICAgICAgIDwvZGl2PiA8IS0tIFJPVyAtLT4KICAgICAgICAgIDwvZGl2PiA8IS0tIGNvbC1sZy05IGNvbC14bC04IC0tPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIgY29sLXhsLTIgbXQtNSBtdC1sZy0wIGFsaWduLWl0ZW1zLXN0YXJ0IHB0LTMiPgogICAgICAgICAgICA8IS0tIGZpbHRlckJ1dHRvbiAtLT4KICAgICAgICAgICAgPGRpdiB2LWlmPSJ0YWJsZURldGFpbC5maWx0ZXJCdXR0b24gIT09IG51bGwgJiYgdGFibGVEZXRhaWwuZmlsdGVyQnV0dG9uICE9PSB1bmRlZmluZWQiICBAY2xpY2s9InN1Ym1pdEZpbHRlcigpIiBjbGFzcz0iYnRuIGJ0bi1saWdodC1wcmltYXJ5IHB4LTYgZm9udC13ZWlnaHQtYm9sZCIgOmNsYXNzPSJbY29uY2F0VGV4dCggJ2J0bi1saWdodC0nLCB0YWJsZURldGFpbC5maWx0ZXJCdXR0b24uY29sb3IpXSIgID57e3RhYmxlRGV0YWlsLmZpbHRlckJ1dHRvbi5sYWJlbH19PC9kaXY+CiAgICAgICAgICAgIDwhLS0gY2xlYXJCdXR0b24gLS0+CiAgICAgICAgICAgIDwhLS0gPGRpdiB2LWlmPSJ0YWJsZURldGFpbC5maWx0ZXJDbGVhciAhPT0gbnVsbCAmJiB0YWJsZURldGFpbC5maWx0ZXJDbGVhciAhPT0gdW5kZWZpbmVkIiAgQGNsaWNrPSJjbGVhckZpbHRlcigpIiBjbGFzcz0iYnRuIGJ0bi1saWdodC1wcmltYXJ5IHB4LTYgZm9udC13ZWlnaHQtYm9sZCBtbC0yIiAgOmNsYXNzPSJbY29uY2F0VGV4dCggJ2J0bi1saWdodC0nLCB0YWJsZURldGFpbC5maWx0ZXJDbGVhci5jb2xvcildIiA+e3t0YWJsZURldGFpbC5maWx0ZXJDbGVhci5sYWJlbH19PC9kaXY+IC0tPgogICAgICAgICAgICA8aSAgdi1pZj0idGFibGVEZXRhaWwuZmlsdGVyQ2xlYXIgIT09IG51bGwgJiYgdGFibGVEZXRhaWwuZmlsdGVyQ2xlYXIgIT09IHVuZGVmaW5lZCIgIEBjbGljaz0iY2xlYXJGYWRlKCkiIGNsYXNzPSJtbC00IGZhciBmYS10aW1lcy1jaXJjbGUgaWNvbi1sZyBjdXJzb3ItcG9pbnRlciBmYS1mbGFnIj4KICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImNsZWFyRWZmZWN0PT09dHJ1ZSIgIGNsYXNzPSJhdC1jb250YWluZXIiIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTsgY29sb3I6IHJlZDsiPgogICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImF0LWl0ZW0gZm9udC1taXRyIiBzdHlsZT0iY29sb3I6IHJlZDsiPiAKICAgICAgICAgICAgICAgICAgICBjbGVhcmVkCiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPCEtLSA8ZGl2IHYtaWY9ImNsZWFyRWZmZWN0PT09dHJ1ZSIgY2xhc3M9ImF0LWNvbnRhaW5lciIgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlOyBjb2xvcjogcmVkOyI+CiAgICAgICAgICAgICAgICAgIDxzcGFuICBjbGFzcz0iYXQtaXRlbSBmb250LW1pdHIiIHN0eWxlPSJjb2xvcjogcmVkOyI+IAogICAgICAgICAgICAgICAgICAgIGNsZWFyCiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+IC0tPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwhLS1lbmQ6OlNlYXJjaCBGb3JtLS0+CgogICAgIDwhLS0gYmVnaW46IHBhZ2luYXRpb24gVE9QIC0tPgogICAgICAgIDxiLWNvbnRhaW5lciB2LWlmPSJ0YWJsZURldGFpbC5wYWdlLnNob3cgPT09IHRydWUgJiYgKHRhYmxlRGV0YWlsLnBhZ2UudG9wYm90dG9tID09PSAyIHx8ICB0YWJsZURldGFpbC5wYWdlLnRvcGJvdHRvbSA9PT0gMykiID4KICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHktNiI+CiAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgIG1kPSI2IiBsZz0iNiIgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LXN0YXJ0IGFsaWduLWl0ZW1zLWNlbnRlciIgPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTMiPiBTaG93aW5nIHt7cGFnZURhdGEuc3RhcnRJbmRleH19IHRvIHt7cGFnZURhdGEuZW5kSW5kZXggfX0gb2Yge3twYWdlRGF0YS5pdGVtQ291bnR9fSA8L3NwYW4+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1yLTMgbWItMCBkLW5vbmUgZC1tZC1ibG9jayI+4LmB4Liq4LiU4LiHOjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgbXItMiAiIHN0eWxlPSJ3aWR0aDogNjBweDsiIHYtbW9kZWw9InBhZ2VTaXplIj4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiA6dmFsdWU9InBhZ2VfaXRlbSIgIHYtZm9yPSIocGFnZV9pdGVtLCBwYWdlX2luZGV4KSBpbiBwYWdlT3B0aW9uIiB2LWJpbmQ6a2V5PSJwYWdlX2luZGV4IiA+e3twYWdlX2l0ZW19fTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXItMyI+4Lij4Liy4Lii4LiB4Liy4LijPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgIG1kPSI2IiBsZz0iNiIgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWVuZCBhbGlnbi1pdGVtcy1jZW50ZXIiICA+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTMiPiDguKvguJnguYnguLI6PC9zcGFuPgogICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBtci0yICIgc3R5bGU9IndpZHRoOiA2MHB4OyIgdi1tb2RlbD0iY3VycmVudFBhZ2UiPgogICAgICAgICAgICAgICAgICA8b3B0aW9uIDp2YWx1ZT0iY3Vycl9pbmRleCIgIHYtZm9yPSJjdXJyX2luZGV4IGluIHBhZ2VEYXRhLnBhZ2VDb3VudCIgdi1iaW5kOmtleT0iY3Vycl9pbmRleCIgPnt7Y3Vycl9pbmRleH19PC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8IS0tIFVzZSB0ZXh0IGluIHByb3BzIC0tPgogICAgICAgICAgICAgICAgPGItcGFnaW5hdGlvbi1uYXYKICAgICAgICAgICAgICAgICAgcGlsbHMKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudFBhZ2UiCiAgICAgICAgICAgICAgICAgIDpudW1iZXItb2YtcGFnZXM9InBhZ2VEYXRhLnBhZ2VDb3VudCIKICAgICAgICAgICAgICAgICAgYmFzZS11cmw9IiMiCiAgICAgICAgICAgICAgICAgIGZpcnN0LXRleHQ9IkZpcnN0IgogICAgICAgICAgICAgICAgICBwcmV2LXRleHQ9IlByZXYiCiAgICAgICAgICAgICAgICAgIG5leHQtdGV4dD0iTmV4dCIKICAgICAgICAgICAgICAgICAgbGFzdC10ZXh0PSJMYXN0IgogICAgICAgICAgICAgICAgICBhbGlnbj0icmlnaHQiCiAgICAgICAgICAgICAgICA+PC9iLXBhZ2luYXRpb24tbmF2PgogICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgPC9iLXJvdz4KICAgICAgPC9iLWNvbnRhaW5lcj4KICAgICAgPCEtLSBlbmQ6IHBhZ2luYXRpb24gLS0+CiAgICAgIDwhLS0gYi1wYWdpbmF0aW9uIC0tPgoKCgogICAgPCEtLSBUYWJsZSBzdHJjdHVyZSB1c2VkIC0tPgogICAgPCEtLWJlZ2luOjpCb2R5LS0+CiAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHktMCIgOmNsYXNzPSJ0YWJsZURldGFpbC50YWJsZUNsYXNzIiA+CiAgICAgIDwhLS1iZWdpbjo6VGFibGUtLT4KICAgICAgPGRpdiB2LWlmPSJ0YWJsZURldGFpbC5pdGVtU2VsZWN0aW9uLnNob3cgPT09IHRydWUiID4KICAgICAgICA8c3BhbiBAY2xpY2s9ImFkZFNlbGVjdGVkQWxsKCkiIHN0eWxlPSJ3aWR0aDogMTAwcHg7IGJvcmRlcjogMXB4IHNvbGlkICNkN2Q3ZDc7ICBwYWRkaW5nOiA1cHggMTBweDsgY3Vyc29yOiBwb2ludGVyOyI+U2VsZWN0IEFsbDwvc3Bhbj4KICAgICAgICA8c3BhbiBAY2xpY2s9InJlbW92ZUFsbCgpIiBzdHlsZT0id2lkdGg6IDEwMHB4OyBib3JkZXI6IDFweCBzb2xpZCAjZDdkN2Q3OyAgcGFkZGluZzogNXB4IDEwcHg7IGJvcmRlci1sZWZ0OiAwOyBjdXJzb3I6IHBvaW50ZXI7Ij5VbnNlbGVjdCBBbGw8L3NwYW4+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJtaXRyLWZvbnQgdGFibGUtcmVzcG9uc2l2ZSIgICA+CiAgICAgICAgPHRhYmxlCiAgICAgICAgICAKICAgICAgICAgIGNsYXNzPSJ0YWJsZSB0YWJsZS1oZWFkLWN1c3RvbSB0YWJsZS12ZXJ0aWNhbC1jZW50ZXIgbWl0ci1mb250IgogICAgICAgICAgc3R5bGU9ImZvbnQtZmFtaWx5Om1pdHI7IgogICAgICAgID4KICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyIGNsYXNzPSJ0ZXh0LWxlZnQiPgogICAgICAgICAgICA8IS0tIFNFTEVDVCBBTEwgLS0+CiAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwbC0wIiBzdHlsZT0id2lkdGg6IDQwcHgiICB2LWlmPSJ0YWJsZURldGFpbC5pdGVtU2VsZWN0aW9uLnNob3cgPT09IHRydWUiID4KICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJjaGVja2JveCIKICAgICAgICAgICAgICAgICAgICA6Y2hlY2tlZD0ic2VsZWN0ZWRBbGxDaGVjayIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZFNlbGVjdGVkQWxsKCkiCiAgICAgICAgICAgICAgICAgIC8+IC0tPgogICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dAogICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgIDpjaGVja2VkPSJzZWxlY3RlZEFsbENoZWNrIgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0iYWRkU2VsZWN0ZWRBbGwoKSIKICAgICAgICAgICAgICAgICAgLz4gLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7IGNvbG9yOndoaXRlOyBwYWRkaW5nOiA1cHggOHB4OyBib3JkZXItcmFkaXVzOiAxMHB4OyB3aWR0aDogNDBweDsgdGV4dC1hbGlnbjpjZW50ZXIiID57e3NlbGVjdGVkTGlzdC5sZW5ndGh9fTwvZGl2PgogICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgPCEtLSBTRUxFQ1QgQUxMIC0tPgoKICAgICAgICAgICAgICA8IS0tIDx0aCBjbGFzcz0icHItMCIgc3R5bGU9IndpZHRoOiA1MHB4Ij5hdXRob3JzPC90aD4gLS0+CiAgICAgICAgICAgICAgPCEtLSA8dGggc3R5bGU9Im1pbi13aWR0aDogMjAwcHgiPjwvdGg+IC0tPgogICAgICAgICAgICAgIDx0aCB2LWZvcj0iKGhlYWRlciwgaGkpIGluIHRhYmxlU3RydWN0dXJlIiAgdi1iaW5kOmtleT0iaGkiIDpzdHlsZT0iaGVhZGVyLndpZHRoIj57e2hlYWRlci5jb2x1bW5OYW1lfX08L3RoPgogICAgICAgICAgICAgIDwhLS0gPHRoIHN0eWxlPSJtaW4td2lkdGg6IDE1MHB4Ij5wcm9ncmVzczwvdGg+IC0tPgogICAgICAgICAgICAgIDx0aCB2LWlmPSJ0YWJsZURldGFpbC50YWJsZUFjdGlvbi5zaG93ID09PSB0cnVlIiBjbGFzcz0icHItMCB0ZXh0LXJpZ2h0IiBzdHlsZT0ibWluLXdpZHRoOiAxNTBweCI+YWN0aW9uPC90aD4gCiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dGVtcGxhdGUgPgogICAgICAgICAgICAgIDx0ciB2LWZvcj0iKGl0ZW0sIGkpIGluIGRhdGEiIHYtYmluZDprZXk9ImkiICBAY2xpY2sucmlnaHQucHJldmVudD0ib3Blbk1lbnUoJGV2ZW50LCAgaXRlbVskc3RvcmUuZ2V0dGVyc1t0YWJsZURldGFpbC51c2VTdG9yZSArICcvaXRlbUlkJ11dICkiICA+CgogICAgICAgICAgICAgICAgPCEtLSBCRUdJTjogIElURU0gU0VMRUNUSU9OICAtLT4KCgogICAgICAgICAgICAgICAgPCEtLSBTRUxFQ1QgQ09MVU1OIC0tPgogICAgICAgICAgICAgICAgPHRkICBjbGFzcz0icGwtMCIgdi1pZj0idGFibGVEZXRhaWwuaXRlbVNlbGVjdGlvbi5zaG93ICA9PT0gdHJ1ZSIgPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNoZWNrYm94IGNoZWNrYm94LWxnIGNoZWNrYm94LXNpbmdsZSI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGlucHV0ICBAY2xpY2s9ImFkZFNlbGVjdGVkTGlzdChpdGVtLCAkZXZlbnQpIiB0eXBlPSJjaGVja2JveCIgdmFsdWU9IjEiIDpjaGVja2VkPSJzZWxlY3RlZENoZWNrW2ldIiAgLz4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwhLS0gRU5EOiAgSVRFTSBTRUxFQ1RJT04gIC0tPgogICAgICAgICAgICAgICAgPCEtLSAqKiogaW1hZ2UgKioqIC0tPgogICAgICAgICAgICAgICAgPHRkIHYtZm9yPSIoY29sLCBjaSkgaW4gdGFibGVTdHJ1Y3R1cmUiICB2LWJpbmQ6a2V5PSJjaSIgICA+CiAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU46ICoqKiBpbWFnZSAqKiogLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWyd0eXBlJ10gPT09ICdpbWFnZSciIGNsYXNzPSJtdC0xIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3ltYm9sLWxhYmVsIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgCiAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9ImNvbC5zdHlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0iZ2V0RnVsbFBhdGgoaXRlbVtjb2wubWFpblRleHRdKSIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJpbWciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICA8IS0tIEVORDogKioqIGltYWdlICoqKiAtLT4KCgogICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTjogKioqIHRleHQgKioqIC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImNvbFsndHlwZSddID09PSAndGV4dCciIGNsYXNzPSJzeW1ib2wgc3ltYm9sLTUwIHN5bWJvbC1saWdodCBtdC0xIj4KICAgICAgICAgICAgICAgICAgPCEtLSAqKiogTWFpbiBUZXh0ICoqKiAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjb2xbJ21haW5UZXh0J10iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyay03NSBmb250LXdlaWdodC1ib2xkZXIgdGV4dC1ob3Zlci1wcmltYXJ5IG1iLTEgZm9udC1zaXplLWxnICIKICAgICAgICAgICAgICAgICAgICA6c3R5bGU9ImNvbFsnbWFpblRleHRTdHlsZSddIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LWZhbWlseTptaXRyOyIgCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW1bY29sWydtYWluVGV4dCddXX19IAogICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICA8IS0tICoqKiBNYWluIFJlZCBUZXh0ICoqKiAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjb2xbJ21haW5SZWRUZXh0J10iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyay03NSBmb250LXdlaWdodC1ib2xkZXIgdGV4dC1ob3Zlci1wcmltYXJ5IG1iLTEgZm9udC1zaXplLWxnICIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6ICNmNjRlNjAgIWltcG9ydGFudDsgZm9udC1mYW1pbHk6J21pdHInOyIKICAgICAgICAgICAgICAgICAgICA6c3R5bGU9ImNvbFsnbWFpblJlZFRleHRTdHlsZSddIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnbWFpblJlZFRleHQnXV19fSAKICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgPCEtLSAqKiogTWFpbiBCbHVlIFRleHQgKioqIC0tPgogICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjb2xbJ21haW5CbHVlVGV4dCddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmstNzUgZm9udC13ZWlnaHQtYm9sZGVyIHRleHQtaG92ZXItcHJpbWFyeSBtYi0xIGZvbnQtc2l6ZS1sZyAiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiAjMjM3MmNlICFpbXBvcnRhbnQ7IGZvbnQtZmFtaWx5OidtaXRyJzsiCiAgICAgICAgICAgICAgICAgICAgOnN0eWxlPSJjb2xbJ21haW5CbHVlVGV4dFN0eWxlJ10iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW1bY29sWydtYWluQmx1ZVRleHQnXV19fSAKICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICA8IS0tICoqKiBDb3B5IEJsdWUgVGV4dCAqKiogLS0+CiAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImNvbFsnY29weUJsdWVUZXh0J10iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtZGFyay03NSBmb250LXdlaWdodC1ib2xkZXIgdGV4dC1ob3Zlci1wcmltYXJ5IG1iLTEgZm9udC1zaXplLWxnICIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6ICMyMzcyY2UgIWltcG9ydGFudDsgZm9udC1mYW1pbHk6J21pdHInOyBjdXJzb3I6cG9pbnRlcjsiCiAgICAgICAgICAgICAgICAgICAgOnN0eWxlPSJjb2xbJ2NvcHlCbHVlVGV4dFN0eWxlJ10iCiAgICAgICAgICAgICAgICAgICAgdi1jbGlwYm9hcmQ6Y29weT0iaXRlbVtjb2xbJ2NvcHlCbHVlVGV4dFZhbHVlJ11dIgoKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImNvcHlUZXh0KGl0ZW1bY29sWydjb3B5Qmx1ZVRleHRWYWx1ZSddXSwgaSkiCgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjb3B5Q29uZmlybVtpXT09PXRydWUiIGNsYXNzPSJhdC1jb250YWluZXIiIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3M9ImF0LWl0ZW0iPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3BpZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnY29weUJsdWVUZXh0J11dfX0gCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAKCgoKICAgICAgICAgICAgICAgICAgPGRpdiAgdi1pZj0iY29sWydsaW5rVGV4dDEnXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1wcmltYXJ5LTc1IGZvbnQtd2VpZ2h0LWJvbGRlciAgZC1ibG9jayB0ZXh0LWhvdmVyLXByaW1hcnkgbWItMSBmb250LXNpemUtbWQgIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogIzIzNzJjZTsgY3Vyc29yOnBvaW50ZXI7ICIKICAgICAgICAgICAgICAgICAgICA6c3R5bGU9ImNvbFsnbGlua1RleHQxU3R5bGUnXSIKICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImxpbmtUbyhpdGVtW2NvbFsnbGlua1VybDEnXV0pIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW1bY29sWydsaW5rVGV4dDEnXV0gfX0gICAKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWydzdWJUZXh0J10iCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LW11dGVkIGQtYmxvY2siCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW1bY29sWydzdWJUZXh0J11dfX0KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWydzdWJUZXh0MiddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1tdXRlZCBkLWJsb2NrIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnc3ViVGV4dDInXV19fQogICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICA8IS0tICoqKiBTdWIgQmx1ZSBUZXh0ICoqKiAtLT4KICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWydzdWJCbHVlVGV4dCddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1tdXRlZCBkLWJsb2NrIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogIzIzNzJjZSAhaW1wb3J0YW50OyBmb250LWZhbWlseTonbWl0cic7IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnc3ViQmx1ZVRleHQnXV19fSAKICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICA8IS0tICoqKiBTdWIgUmVkIFRleHQgKioqIC0tPgogICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJjb2xbJ3N1YlJlZFRleHQnXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIHRleHQtbXV0ZWQgZC1ibG9jayIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6ICNmNjRlNjAgIWltcG9ydGFudDsgZm9udC1mYW1pbHk6J21pdHInOyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7aXRlbVtjb2xbJ3N1YlJlZFRleHQnXV19fSAKICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwhLS0gRU5EOiAqKiogdGV4dCAqKiogLS0+CiAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgPCEtLSBCRUdJTjogKioqIGRhdGUgKioqIC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9ImNvbFsndHlwZSddID09PSAnZGF0ZSciIGNsYXNzPSJzeW1ib2wgc3ltYm9sLTUwIHN5bWJvbC1saWdodCBtdC0xIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0iY29sWydtYWluVGV4dCddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmstNzUgZm9udC13ZWlnaHQtYm9sZGVyIHRleHQtaG92ZXItcHJpbWFyeSBtYi0xIGZvbnQtc2l6ZS1sZyAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBkYXRlRm9ybWF0U2VsZWN0KCBpdGVtW2NvbFsnbWFpblRleHQnXV0sIGNvbFsnZm9ybWF0J10gKSAgfX0gCiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9ImNvbFsnbWFpblJlZFRleHQnXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1kYXJrLTc1IGZvbnQtd2VpZ2h0LWJvbGRlciB0ZXh0LWhvdmVyLXByaW1hcnkgbWItMSBmb250LXNpemUtbGcgIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogI2Y2NGU2MCAhaW1wb3J0YW50OyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAge3sgZGF0ZUZvcm1hdFNlbGVjdCggaXRlbVtjb2xbJ21haW5SZWRUZXh0J11dLCBjb2xbJ2Zvcm1hdCddICkgIH19IAogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJjb2xbJ21haW5CbHVlVGV4dCddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWRhcmstNzUgZm9udC13ZWlnaHQtYm9sZGVyIHRleHQtaG92ZXItcHJpbWFyeSBtYi0xIGZvbnQtc2l6ZS1sZyAiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiAjMjM3MmNlICFpbXBvcnRhbnQ7IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAge3sgZGF0ZUZvcm1hdFNlbGVjdCggaXRlbVtjb2xbJ21haW5CbHVlVGV4dCddXSwgY29sWydmb3JtYXQnXSApICB9fSAKICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICA8c3BhbiAgdi1pZj0iY29sWydsaW5rVGV4dDEnXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1wcmltYXJ5LTc1IGZvbnQtd2VpZ2h0LWJvbGRlciAgZC1ibG9jayB0ZXh0LWhvdmVyLXByaW1hcnkgbWItMSBmb250LXNpemUtbWQgIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogIzIzNzJjZTsgY3Vyc29yOnBvaW50ZXI7IgogICAgICAgICAgICAgICAgICAgIEBjbGljaz0ibGlua1RvKGNvbFsnbGlua1VybDEnXSkiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbVtjb2xbJ2xpbmtUZXh0MSddXSB9fSAgIAogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9ImNvbFsnc3ViVGV4dCddIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1tdXRlZCBkLWJsb2NrICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7aXRlbVtjb2xbJ3N1YlRleHQnXV19fQogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9ImNvbFsnc3ViVGV4dDInXSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIHRleHQtbXV0ZWQgZC1ibG9jayAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICB7e2l0ZW1bY29sWydzdWJUZXh0MiddXX19CiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICA8IS0tIEVORDogKioqIGRhdGUgKioqIC0tPgoKCiAgICAgICAgICAgICAgICAgIDwhLS0gQkVHSU46ICoqKiBwcm9ncmVzcyAqKiogLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWyd0eXBlJ10gPT09ICdwcm9ncmVzcyciIGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gdy05MCBtci00Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW4gbWItMiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGV4dC1tdXRlZCBwLTJtci0yIGZvbnQtc2l6ZS1zbSBmb250LXdlaWdodC1ib2xkIHB5LTIiCiAgICAgICAgICAgICAgICAgICAgICAgID4ge3tpdGVtW2NvbFsnc3ViVGV4dCddXX19PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1tdXRlZCBmb250LXNpemUtc20gZm9udC13ZWlnaHQtYm9sZCBweS0yIgogICAgICAgICAgICAgICAgICAgICAgICA+IHt7aXRlbVtjb2xbJ3N1YlRleHQyJ11dfX08L3NwYW4KICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2dyZXNzIHByb2dyZXNzLXhzIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2dyZXNzLWJhciIKICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0icHJvZ3Jlc3NiYXIiCiAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT0ieyAnd2lkdGgnOiBwcm9ncmVzc0JhclBlcmNlbnQoaXRlbVtjb2xbJ3N0YXJ0J11dICwgIGl0ZW1bY29sWydlbmQnXV0gKSB9IgogICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9ImNvbmNhdFRleHQoJ2JnLScsaXRlbVtjb2xbJ2NvbG9yJ11dICkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtdmFsdWVub3c9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVlbWluPSIwIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVlbWF4PSIxMDAiCiAgICAgICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tIEVORDogKioqIHByb2dyZXNzICoqKiAtLT4KCiAgICAgICAgICAgICAgICA8IS0tIEJFR0lOOiAqKiogc3RhdHVzICoqKiAtLT4KICAgICAgICAgICAgICAgIDxkaXYgdi1pZj0iY29sWyd0eXBlJ10gPT09ICdzdGF0dXMnIiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uICBtci0yIGp1c3RpZnktY29udGVudC1jZW50ZXIgIj4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxhYmVsIGxhYmVsLWxnIGZvbnQtd2VpZ2h0LWJvbGQgbGFiZWwtbGlnaHQtcHJpbWFyeSBsYWJlbC1pbmxpbmUgcC00ICIgc3R5bGU9IndpZHRoOiBmaXQtY29udGVudCA7Zm9udC1mYW1pbHk6IG1pdHI7IGZvbnQtc2l6ZTogMXJlbTsiCiAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9ImNvbmNhdFRleHQoJ2xhYmVsLWxpZ2h0LScsIGl0ZW1bY29sWydjb2xvciddXSApIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW1bY29sWydtYWluVGV4dCddXSB9fQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJjb2xbJ3N1YlRleHQnXSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1tdXRlZCBkLWJsb2NrIHB0LTMiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnc3ViVGV4dCddXX19CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9ImNvbFsnc3ViVGV4dDInXSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LW11dGVkIGZvbnQtd2VpZ2h0LWJvbGQgdGV4dC1tdXRlZCBkLWJsb2NrIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIHt7aXRlbVtjb2xbJ3N1YlRleHQyJ11dfX0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0iY29sWydzdWJUZXh0MyddIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCB0ZXh0LW11dGVkIGQtYmxvY2siCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3tpdGVtW2NvbFsnc3ViVGV4dDMnXV19fQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0gRU5EOiAqKiogc3RhdHVzICoqKiAtLT4KCgoKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InByLTAgdGV4dC1yaWdodCIgIHYtaWY9InRhYmxlRGV0YWlsLnRhYmxlQWN0aW9uLnNob3cgPT09IHRydWUiID4KICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgdi1mb3I9Iih0YWJsZUFjdCwgdGFpKSBpbiB0YWJsZURldGFpbC50YWJsZUFjdGlvbi5hY3Rpb25zIiAgdi1iaW5kOmtleT0idGFpIiA+IC0tPgoJCQkJCQkJCQkJPERyb3BEb3duQWN0aW9uICB2LWlmPSJ0YWJsZURldGFpbC50YWJsZUFjdGlvbi50eXBlID09PSAnZHJvcGRvd24nIiA6aXRlbUlkPSJpdGVtWyRzdG9yZS5nZXR0ZXJzW3RhYmxlRGV0YWlsLnVzZVN0b3JlICsgJy9pdGVtSWQnXV0iIDphY3Rpb25EZXRhaWw9InRhYmxlRGV0YWlsLnRhYmxlQWN0aW9uIiA+PGkgY2xhc3M9ImtpIGtpLWJvbGQtbW9yZS1ob3IiPjwvaT48L0Ryb3BEb3duQWN0aW9uPgoKICAgICAgICAgICAgICAgICAgICA8SWNvbkFjdGlvbiA6YW5JdGVtPSJpdGVtIiAgOml0ZW1JZD0iaXRlbVskc3RvcmUuZ2V0dGVyc1t0YWJsZURldGFpbC51c2VTdG9yZSArICcvaXRlbUlkJ11dIiA6YWN0aW9uRGV0YWlsPSJ0YWJsZURldGFpbC50YWJsZUFjdGlvbiIgPjwvSWNvbkFjdGlvbj4KICAgICAgICAgICAgICAgICA8IS0tIDwvZGl2PiAtLT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLSA8dGVtcGxhdGUgdi1pZj0idGFibGVEZXRhaWwudGFibGVBY3Rpb24udHlwZSA9PT0gJ2J1dHRvbiciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWljb24gYnRuLWxpZ2h0IGJ0bi1ob3Zlci1wcmltYXJ5IGJ0bi1zbSIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3ZnLWljb24gc3ZnLWljb24tbWQgc3ZnLWljb24tcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbmxpbmUtc3ZnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvbWVkaWEvc3ZnL2ljb25zL0dlbmVyYWwvU2V0dGluZ3MtMS5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4taWNvbiBidG4tbGlnaHQgYnRuLWhvdmVyLXByaW1hcnkgYnRuLXNtIG14LTMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN2Zy1pY29uIHN2Zy1pY29uLW1kIHN2Zy1pY29uLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5saW5lLXN2ZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL21lZGlhL3N2Zy9pY29ucy9Db21tdW5pY2F0aW9uL1dyaXRlLnN2ZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1pY29uIGJ0bi1saWdodCBidG4taG92ZXItcHJpbWFyeSBidG4tc20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN2Zy1pY29uIHN2Zy1pY29uLW1kIHN2Zy1pY29uLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5saW5lLXN2ZyBzcmM9Ii9tZWRpYS9zdmcvaWNvbnMvR2VuZXJhbC9UcmFzaC5zdmciIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IC0tPgogICAgICAgICAgICAgICAgPC90ZD4gCiAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDwhLS1lbmQ6OlRhYmxlLS0+CiAgICAgICAgCiAgICAgICAgPCEtLSBiZWdpbjogcGFnaW5hdGlvbiAgQk9UVE9NIC0tPgogICAgICAgIDxiLWNvbnRhaW5lciB2LWlmPSJ0YWJsZURldGFpbC5wYWdlLnNob3cgPT09IHRydWUgJiYgKHRhYmxlRGV0YWlsLnBhZ2UudG9wYm90dG9tID09PSAxIHx8ICB0YWJsZURldGFpbC5wYWdlLnRvcGJvdHRvbSA9PT0gMykiID4KICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHktNiI+CiAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgIG1kPSI2IiBsZz0iNiIgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LXN0YXJ0IGFsaWduLWl0ZW1zLWNlbnRlciIgPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTMiPiBTaG93aW5nIHt7cGFnZURhdGEuc3RhcnRJbmRleH19IHRvIHt7cGFnZURhdGEuZW5kSW5kZXggfX0gb2Yge3twYWdlRGF0YS5pdGVtQ291bnR9fSA8L3NwYW4+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im1yLTMgbWItMCBkLW5vbmUgZC1tZC1ibG9jayI+4LmB4Liq4LiU4LiHOjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgbXItMiAiIHN0eWxlPSJ3aWR0aDogNjBweDsiIHYtbW9kZWw9InBhZ2VTaXplIj4KICAgICAgICAgICAgICAgICAgPG9wdGlvbiA6dmFsdWU9InBhZ2VfaXRlbSIgIHYtZm9yPSIocGFnZV9pdGVtLCBwYWdlX2luZGV4KSBpbiBwYWdlT3B0aW9uIiB2LWJpbmQ6a2V5PSJwYWdlX2luZGV4IiA+e3twYWdlX2l0ZW19fTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibXItMyI+4Lij4Liy4Lii4LiB4Liy4LijPC9zcGFuPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgIG1kPSI2IiBsZz0iNiIgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWVuZCBhbGlnbi1pdGVtcy1jZW50ZXIiICA+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTMiPiDguKvguJnguYnguLI6PC9zcGFuPgogICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBtci0yICIgc3R5bGU9IndpZHRoOiA2MHB4OyIgdi1tb2RlbD0iY3VycmVudFBhZ2UiPgogICAgICAgICAgICAgICAgICA8b3B0aW9uIDp2YWx1ZT0iY3Vycl9pbmRleCIgIHYtZm9yPSJjdXJyX2luZGV4IGluIHBhZ2VEYXRhLnBhZ2VDb3VudCIgdi1iaW5kOmtleT0iY3Vycl9pbmRleCIgPnt7Y3Vycl9pbmRleH19PC9vcHRpb24+CiAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8IS0tIFVzZSB0ZXh0IGluIHByb3BzIC0tPgogICAgICAgICAgICAgICAgPGItcGFnaW5hdGlvbi1uYXYKICAgICAgICAgICAgICAgICAgcGlsbHMKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudFBhZ2UiCiAgICAgICAgICAgICAgICAgIDpudW1iZXItb2YtcGFnZXM9InBhZ2VEYXRhLnBhZ2VDb3VudCIKICAgICAgICAgICAgICAgICAgYmFzZS11cmw9IiMiCiAgICAgICAgICAgICAgICAgIGZpcnN0LXRleHQ9IkZpcnN0IgogICAgICAgICAgICAgICAgICBwcmV2LXRleHQ9IlByZXYiCiAgICAgICAgICAgICAgICAgIG5leHQtdGV4dD0iTmV4dCIKICAgICAgICAgICAgICAgICAgbGFzdC10ZXh0PSJMYXN0IgogICAgICAgICAgICAgICAgICBhbGlnbj0icmlnaHQiCiAgICAgICAgICAgICAgICA+PC9iLXBhZ2luYXRpb24tbmF2PgogICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgPC9iLXJvdz4KICAgICAgPC9iLWNvbnRhaW5lcj4KICAgICAgPCEtLSBlbmQ6IHBhZ2luYXRpb24gLS0+CiAgICAgIDwhLS0gYi1wYWdpbmF0aW9uIC0tPgogICAgICAKICAgIDwvZGl2PgoKCiAgICA8IS0tIFJJR0hUIENMSUNLIC0tPgogICAgPHVsIGlkPSJyaWdodC1jbGljay1tZW51IiAgdGFiaW5kZXg9Ii0xIiByZWY9InJpZ2h0IiAgdi1pZj0idmlld01lbnU9PT10cnVlICYmIHRhYmxlRGV0YWlsLnJpZ2h0Q2xpY2suc2hvdz09PXRydWUiIHYtY2xpY2stb3V0c2lkZT0iY2xvc2VNZW51IiAgOnN0eWxlPSJ7dG9wOnRvcCwgbGVmdDpsZWZ0LCBwb3NpdGlvbjonZml4ZWQnLCBjdXJzb3I6J3BvaW50ZXInfSIgPgogICAgICAgIDxsaT57e3RoaXMuaXRlbV9pZH19PC9saT4KICAgICAgICA8bGk+Rmlyc3QgbWVudSBpdGVtPC9saT4KICAgICAgICA8bGk+U2Vjb25kIG1lbnUgaXRlbTwvbGk+CiAgICA8L3VsPgogICAgPCEtLSBSSUdIVCBDTElDSyAtLT4KCgoKICAgIDwhLS1lbmQ6OkJvZHktLT4KICA8L2Rpdj4K"},null]}