{"remainingRequest":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/view/layout/aside/Menu.vue?vue&type=template&id=76b831aa&","dependencies":[{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/src/view/layout/aside/Menu.vue","mtime":1607442704000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/belliecee/Downloads/metronic-responsive-admin-dashboard-template/metronic_v7.2.9/theme/vue/demo5/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}