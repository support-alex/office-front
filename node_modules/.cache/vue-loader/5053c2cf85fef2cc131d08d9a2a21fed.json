{"remainingRequest":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\auth\\login_pages\\Login-1.vue?vue&type=template&id=26f1151e&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\auth\\login_pages\\Login-1.vue","mtime":1751211612644},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1670779070623},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1670779070622}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtcm9vdCIgfSwgWwogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAibG9naW4gbG9naW4tMSBkLWZsZXggZmxleC1jb2x1bW4gZmxleC1sZy1yb3cgZmxleC1jb2x1bW4tZmx1aWQgYmctd2hpdGUiLAogICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAibG9naW4tc2lnbmluLW9uIjogdGhpcy5zdGF0ZSA9PSAic2lnbmluIiwKICAgICAgICAgICJsb2dpbi1zaWdudXAtb24iOiB0aGlzLnN0YXRlID09ICJzaWdudXAiLAogICAgICAgICAgImxvZ2luLWZvcmdvdC1vbiI6IHRoaXMuc3RhdGUgPT0gImZvcmdvdCIKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7IGlkOiAia3RfbG9naW4iIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibG9naW4tYXNpZGUgZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtcm93LWF1dG8iLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjRjJDOThBIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAiYXNpZGUtaW1nIGQtZmxleCBmbGV4LXJvdy1mbHVpZCBiZ2ktbm8tcmVwZWF0IGJnaS1wb3NpdGlvbi15LWJvdHRvbSBiZ2ktcG9zaXRpb24teC1jZW50ZXIiLAogICAgICAgICAgICAgIHN0eWxlOiB7IGJhY2tncm91bmRJbWFnZTogInVybCgiICsgX3ZtLmJhY2tncm91bmRJbWFnZSArICIpIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAibG9naW4tY29udGVudCBmbGV4LXJvdy1mbHVpZCBkLWZsZXggZmxleC1jb2x1bW4ganVzdGlmeS1jb250ZW50LWNlbnRlciBwb3NpdGlvbi1yZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gcC03IG14LWF1dG8iCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImQtZmxleCBmbGV4LWNvbHVtbi1mbHVpZCBmbGV4LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibG9naW4tZm9ybSBsb2dpbi1zaWduaW4iIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZm9ybSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0iLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBub3ZhbGlkYXRlOiAibm92YWxpZGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICBpZDogImt0X2xvZ2luX3NpZ25pbl9mb3JtIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBiLWxnLTAgcGItNSIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRpc2FibGVkQnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB2YXJpYW50OiAicHJpbWFyeSIsIGRpc2FibGVkOiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYi1zcGlubmVyIiwgeyBhdHRyczogeyBzbWFsbDogIiIgfSB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBMb2FkaW5nLi4uICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAhX3ZtLmRpc2FibGVkQnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidG4gYnRuLWRhbmdlciBmb250LXdlaWdodC1ib2xkZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYWN0aXZhdGVHb29nbGUoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTG9naW4gd2l0aCBHb29nbGUiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiR29vZ2xlTG9naW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkaHQ6ICIxcHggIWltcG9ydGFudCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfdm0ucGFyYW1zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyUGFyYW1zOiBfdm0ucmVuZGVyUGFyYW1zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzOiBfdm0ub25TdWNjZXNzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb25GYWlsdXJlOiBfdm0ub25GYWlsdXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxvZ2luLWZvcm0gbG9naW4tc2lnbnVwIiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgbm92YWxpZGF0ZTogIm5vdmFsaWRhdGUiLAogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJrdF9sb2dpbl9zaWdudXBfZm9ybSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogImZ1bGxuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc29saWQgaC1hdXRvIHB5LTcgcHgtNiByb3VuZGVkLWxnIGZvbnQtc2l6ZS1oNiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRnVsbG5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJmdWxsbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiAib2ZmIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJyZW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZCBoLWF1dG8gcHktNyBweC02IHJvdW5kZWQtbGcgZm9udC1zaXplLWg2IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiAib2ZmIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJycGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZCBoLWF1dG8gcHktNyBweC02IHJvdW5kZWQtbGcgZm9udC1zaXplLWg2IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiUGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiAib2ZmIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJjcGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zb2xpZCBoLWF1dG8gcHktNyBweC02IHJvdW5kZWQtbGcgZm9udC1zaXplLWg2IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiQ29uZmlybSBwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImNwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiAib2ZmIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgZC1mbGV4IGZsZXgtd3JhcCBwYi1sZy0wIHBiLTMiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6ICJrdF9sb2dpbl9zaWdudXBfc3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnRuIGJ0bi1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDYgcHgtOCBweS00IG15LTMgbXItNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjE1MHB4IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgU3VibWl0ICIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ0biBidG4tbGlnaHQtcHJpbWFyeSBmb250LXdlaWdodC1ib2xkZXIgZm9udC1zaXplLWg2IHB4LTggcHktNCBteS0zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImt0X2xvZ2luX3NpZ251cF9jYW5jZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hvd0Zvcm0oInNpZ25pbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBDYW5jZWwgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxvZ2luLWZvcm0gbG9naW4tZm9yZ290IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmVmOiAia3RfbG9naW5fZm9yZ290X2Zvcm0iLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIG5vdmFsaWRhdGU6ICJub3ZhbGlkYXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fZm9yZ290X2Zvcm0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSg1KSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAgZC1mbGV4IGZsZXgtd3JhcCBwYi1sZy0wIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ0biBidG4tcHJpbWFyeSBmb250LXdlaWdodC1ib2xkZXIgZm9udC1zaXplLWg2IHB4LTggcHktNCBteS0zIG1yLTQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fZm9yZ290X3N1Ym1pdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBTdWJtaXQgIildCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnRuIGJ0bi1saWdodC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDYgcHgtOCBweS00IG15LTMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAia3RfbG9naW5fZm9yZ290X2NhbmNlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93Rm9ybSgic2lnbmluIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIENhbmNlbCAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oNikKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJkLWZsZXggZmxleC1jb2x1bW4tYXV0byBmbGV4LWNvbHVtbiBwdC1sZy00MCBwdC0xNSIgfSwKICAgICAgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIG1iLTEwIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYXgtaC03MHB4IiwKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAibWVkaWEvbG9nb3MvbG9nby1sZXR0ZXItMS5wbmciLCBhbHQ6ICIiIH0KICAgICAgICAgIH0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiaDMiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAiZm9udC13ZWlnaHQtYm9sZGVyIHRleHQtY2VudGVyIGZvbnQtc2l6ZS1oNCBmb250LXNpemUtaDEtbGciLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiM5ODY5MjMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiIERpc2NvdmVyIEFtYXppbmcgTWV0cm9uaWMgIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIndpdGggZ3JlYXQgYnVpbGQgdG9vbHMgIikKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYi0xMyBwdC1sZy0wIHB0LTUiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImgxIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgImZvbnQtd2VpZ2h0LWJvbGRlciB0ZXh0LWRhcmsgZm9udC1zaXplLWg0IGZvbnQtc2l6ZS1oMS1sZyIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjEuNXJlbSIsIGNvbG9yOiAiYmx1ZSIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiIEFsZXggUmVudGFsIEFwcCAiKV0KICAgICAgKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1oNCIgfSwgWwogICAgICAgIF92bS5fdigiTG9nIEluIHdpdGggR29vZ2xlICIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBiLTEzIHB0LWxnLTAgcHQtNSIgfSwgWwogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAiZm9udC13ZWlnaHQtYm9sZGVyIHRleHQtZGFyayBmb250LXNpemUtaDQgZm9udC1zaXplLWgxLWxnIgogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiIFNpZ24gVXAgIildCiAgICAgICksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQgZm9udC13ZWlnaHQtYm9sZCBmb250LXNpemUtaDQiIH0sIFsKICAgICAgICBfdm0uX3YoIiBFbnRlciB5b3VyIGRldGFpbHMgdG8gY3JlYXRlIHlvdXIgYWNjb3VudCAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJjaGVja2JveCBtYi0wIiB9LCBbCiAgICAgICAgX2MoImlucHV0IiwgeyBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giLCBuYW1lOiAiYWdyZWUiIH0gfSksCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibXItMiIgfSksCiAgICAgICAgX3ZtLl92KCIgSSBBZ3JlZSB0aGUgIiksCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibWwtMiIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigidGVybXMgYW5kIGNvbmRpdGlvbnMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYi0xMyBwdC1sZy0wIHB0LTUiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgImZvbnQtd2VpZ2h0LWJvbGRlciB0ZXh0LWRhcmsgZm9udC1zaXplLWg0IGZvbnQtc2l6ZS1oMS1sZyIKICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIiBGb3Jnb3R0ZW4gUGFzc3dvcmQgPyAiKV0KICAgICAgKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBmb250LXdlaWdodC1ib2xkIGZvbnQtc2l6ZS1oNCIgfSwgWwogICAgICAgIF92bS5fdigiIEVudGVyIHlvdXIgZW1haWwgdG8gcmVzZXQgeW91ciBwYXNzd29yZCAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNvbGlkIGgtYXV0byBweS03IHB4LTYgcm91bmRlZC1sZyBmb250LXNpemUtaDYiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB0eXBlOiAiZW1haWwiLAogICAgICAgICAgcGxhY2Vob2xkZXI6ICJFbWFpbCIsCiAgICAgICAgICBuYW1lOiAiZW1haWwiLAogICAgICAgICAgYXV0b2NvbXBsZXRlOiAib2ZmIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtbGctc3RhcnQganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1lbmQgcHktNyBweS1sZy0wIgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGRlciBmb250LXNpemUtaDUiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlRlcm1zIildCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LXByaW1hcnkgbWwtMTAgZm9udC13ZWlnaHQtYm9sZGVyIGZvbnQtc2l6ZS1oNSIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUGxhbnMiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtcHJpbWFyeSBtbC0xMCBmb250LXdlaWdodC1ib2xkZXIgZm9udC1zaXplLWg1IiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDb250YWN0IFVzIildCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}