{"remainingRequest":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\wizard\\Wizard-4.vue?vue&type=template&id=34435e7a&","dependencies":[{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\src\\view\\pages\\wizard\\Wizard-4.vue","mtime":1670779073741},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1670779070623},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670779062492},{"path":"C:\\Users\\ASUS\\Documents\\Alex\\office-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1670779070622}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}